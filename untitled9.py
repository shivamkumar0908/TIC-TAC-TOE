# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G0PJcSC_Ve0letSpJiGCjmBtYF5eqacX
"""

from IPython.display import clear_output

def display_board(board):
  clear_output
  print(board[7]+'|'+board[8]+'|'+board[9])
  print('------')
  print(board[4]+'|'+board[5]+'|'+board[6])
  print('------')
  print(board[1]+'|'+board[2]+'|'+board[3])
  print('------')
test_board=['#','X','O','X','O','X','O','X','O','X']
display_board(test_board)

def player_input():
  
  """
  output= (player 1 marker, player 2 marker) # doc string
  """
  marker=''
  while marker !='X' and marker != 'O':
    marker= input('Player1: choose X or O: ')
  if marker=='X':
   return('X','O')
  else:
    return('O','X')
player_input()
player1_marker , player2_marker = player_input()

def place_marker(board,marker,position):

  board[position] = marker

place_marker(test_board,'#',9)
display_board(test_board)

def win_check(board,mark):

  # win tic tac toe ?

  # all rows, and check to see if they all share the same marker ?
  # all columns , check to see if marker matches
  # 2 diagonals, check to see match
 return ((board[7]==mark and board[8]==mark and board[9]==mark)or# across the top
   (board[4]==mark and board[5]==mark and board[6]==mark)or# across the middle
   (board[1]==mark and board[2]==mark and board[3]==mark)or# across the down
   (board[7]==mark and board[4]==mark and board[1]==mark)or#down the leftside
   (board[8]==mark and board[5]==mark and board[2]==mark)or#down the middle
   (board[9]==mark and board[6]==mark and board[3]==mark)or#down the rightside
   (board[7]==mark and board[5]==mark and board[3]==mark)or#diagonal
   (board[9]==mark and board[5]==mark and board[1]==mark))#diagonal

import random # which one goes first
def choose_first():
  flip=random.randint(0,1)
  if flip == 0:
    return 'player 1'
  else:
    return 'player 2'

def space_check(board,position): # check wether the space on the board is freely available or not
  return board[position]== ' '

def full_board_check(board):
  for i in range(1,10):
    if space_check(board,i): # if i have a space that means my board is not full 
      return False
 # board is full we return true
  return True

def player_choice(board):
  position = 0
  while position not in range (1,10) or not space_check(board,position):
    position = int(input('choose position (1-9): '))
  return position

# ask if the person wants to play again
def replay():
  choice= input('play again ?:enter Yes or No ')
  return choice== 'Yes'

# While loop keep running the game
print('Welcome to Tic Tac Toe')

while True:

  # Play the game

  # set up everything (board,whose first,choose marker x,O)
  the_board= [' ']*10
  player1_marker , player2_marker = player_input()

  turn = choose_first()
  print(f'{turn} will go first' )
 

  play_game = input('Ready to play ? y or n ?')

  if play_game == 'y':
    game_on = True
  else:
    game_on = False


  # game play

  while game_on:
    if turn == 'player 1':

      #show the board
      display_board(the_board)
      #choose a position
      position=player_choice(the_board)
      #place the marker on the position
      place_marker(the_board,player1_marker,position)
      #check if they won
      if win_check(the_board,player1_marker):
        display_board(the_board)
        print('player 1 won !!')
        game_on = False
      else:
        if full_board_check(the_board):
          display_board(the_board)
          print('tie game !!')
          game_on = False
        else:
          turn = 'player 2'
      #check if there is a tie
      #no won no tie ? then next player turn
      ## player one turn

    else:
      #show the board
      display_board(the_board)
      #choose a position
      position=player_choice(the_board)
      #place the marker on the position
      place_marker(the_board,player2_marker,position)
      #check if they won
      if win_check(the_board,player2_marker):
        display_board(the_board)
        print('player 2 won !!')
        game_on = False
      else:
        if full_board_check(the_board):
          display_board(the_board)
          print('tie game !!')
          game_on = False
        else:
          turn = 'player 1' 

    ## player two turn





  if not replay():
    break
  # Break out of the while loop on the replay()